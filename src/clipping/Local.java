/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package clipping;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

/**
 *
 * @author majam
 */
public class Local extends javax.swing.JPanel {

    /**
     * Creates new form Local
     */
    public Local() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Local = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        nodes = new javax.swing.JTextField();
        edges = new javax.swing.JTextField();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setText("Cargar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        nodes.setText("nodes.xml");
        nodes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodesActionPerformed(evt);
            }
        });

        edges.setText("edges.xml");
        edges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edgesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LocalLayout = new javax.swing.GroupLayout(Local);
        Local.setLayout(LocalLayout);
        LocalLayout.setHorizontalGroup(
            LocalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LocalLayout.createSequentialGroup()
                .addContainerGap(116, Short.MAX_VALUE)
                .addGroup(LocalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(edges, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nodes, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addGap(114, 114, 114))
        );
        LocalLayout.setVerticalGroup(
            LocalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LocalLayout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addGroup(LocalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LocalLayout.createSequentialGroup()
                        .addComponent(nodes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(edges, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(LocalLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jButton1)))
                .addContainerGap(147, Short.MAX_VALUE))
        );

        add(Local, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 300));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Obtiene los nombres de archivo ingresados en los campos de texto
        String nombreArchivo1 = nodes.getText();
        String nombreArchivo2 = edges.getText();

        try {
            // Busca los archivos XML con los nombres especificados
            File archivo1 = buscarArchivo(nombreArchivo1);
            File archivo2 = buscarArchivo(nombreArchivo2);

            if (archivo1 != null && archivo2 != null) {
                ArrayList<Point> points = cargarPoint(nombreArchivo1);
                ArrayList<Edge> edges = cargarEdge(nombreArchivo2);

                // Crea una instancia de Probar y pasa los nombres de archivo como argumentos
                Clipping clipping = new Clipping(points, edges, nombreArchivo1, nombreArchivo2);

                // Crear un JFrame para mostrar el panel Probar
                JFrame frame = new JFrame("Dibujar Puntos");
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.setSize(1000, 1000);
                frame.add(clipping);
                frame.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "Uno o ambos archivos no se encontraron.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Ocurri贸 un error al buscar los archivos: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } 
    }//GEN-LAST:event_jButton1ActionPerformed

    private File buscarArchivo(String nombre) throws Exception{
       File directorio = new File("C:\\Users\\majam\\OneDrive\\Documentos\\NetBeansProjects\\Clipping"); // Reemplaza con la ruta de tu directorio
        File[] archivos = directorio.listFiles();

        if (archivos != null) {
            for (File archivo : archivos) {
                if (archivo.isFile() && archivo.getName().equals(nombre)) {
                    return archivo; // Se encontr贸 el archivo
                }
            }
        }

        throw new Exception("El archivo no se encontr贸."); // Lanza una excepci贸n si el archivo no se encuentra
    }
    
    public static ArrayList<Point> cargarPoint(String filePath) {
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<ArrayList<Point>> future = executor.submit(new Callable<ArrayList<Point>>() {
            @Override
            public ArrayList<Point> call() {
                ArrayList<Point> points = new ArrayList<>();
                try {
                    File file = new File(filePath);
                    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                    DocumentBuilder builder = factory.newDocumentBuilder();
                    Document document = builder.parse(file);
                    NodeList nodeList = document.getElementsByTagName("row");

                    for (int i = 0; i < nodeList.getLength(); i++) {
                        Element element = (Element) nodeList.item(i);
                        long osmid = Long.parseLong(element.getElementsByTagName("osmid").item(0).getTextContent());
                        double x = Double.parseDouble(element.getElementsByTagName("x").item(0).getTextContent());
                        double y = Double.parseDouble(element.getElementsByTagName("y").item(0).getTextContent());
                        points.add(new Point(x, y, osmid));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                return points;
            }
        });

        try {
            return future.get();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            executor.shutdown();
        }
        return new ArrayList<>();
    }

    public static ArrayList<Edge> cargarEdge(String filePath) {
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<ArrayList<Edge>> future = executor.submit(new Callable<ArrayList<Edge>>() {
            @Override
            public ArrayList<Edge> call() {
                ArrayList<Edge> edges = new ArrayList<>();
                try {
                    File file = new File(filePath);
                    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                    DocumentBuilder builder = factory.newDocumentBuilder();
                    Document document = builder.parse(file);
                    NodeList nodeList = document.getElementsByTagName("edge");

                    for (int i = 0; i < nodeList.getLength(); i++) {
                        Element element = (Element) nodeList.item(i);
                        long u = Long.parseLong(element.getElementsByTagName("u").item(0).getTextContent());
                        long v = Long.parseLong(element.getElementsByTagName("v").item(0).getTextContent());
                        String highway = element.getElementsByTagName("highway").getLength() > 0
                                ? element.getElementsByTagName("highway").item(0).getTextContent()
                                : "unknown"; // Valor predeterminado en caso de que <highway> no exista

                        edges.add(new Edge(u, v, highway));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                return edges;
            }
        });

        try {
            return future.get();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            executor.shutdown();
        }
        return new ArrayList<>();
    }
    
    private void nodesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nodesActionPerformed

    private void edgesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edgesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_edgesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Local;
    private javax.swing.JTextField edges;
    private javax.swing.JButton jButton1;
    private javax.swing.JTextField nodes;
    // End of variables declaration//GEN-END:variables
}
