/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package clipping;
import clipping.CiudadesProvider;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
/**
 *
 * @author majam
 */
public class Online extends javax.swing.JPanel {

    /**
     * Creates new form Local
     */
    public Online() {
        initComponents();
        cargarCiudadesEnComboBox();
        
        jComboBox1.setSelectedIndex(-1);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Local = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButton1.setText("Cargar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LocalLayout = new javax.swing.GroupLayout(Local);
        Local.setLayout(LocalLayout);
        LocalLayout.setHorizontalGroup(
            LocalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LocalLayout.createSequentialGroup()
                .addContainerGap(121, Short.MAX_VALUE)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(117, 117, 117))
        );
        LocalLayout.setVerticalGroup(
            LocalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LocalLayout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addGroup(LocalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(176, Short.MAX_VALUE))
        );

        add(Local, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 300));
    }// </editor-fold>//GEN-END:initComponents
    
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
      String selectedCiudad = (String) jComboBox1.getSelectedItem();

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String selectedCiudad = (String) jComboBox1.getSelectedItem();

        if (selectedCiudad != null) {
            try {
                CiudadesProvider p = CiudadesProvider.instance();
                CiudadesProvider.Ciudad ciudad = p.ciudad(selectedCiudad);

                // Obtén los datos XML de nodos y aristas de la ciudad desde la nube
                String xmlNodes = ciudad.getXmlNodes();
                String xmlEdges = ciudad.getXmlEdges();

                // Parsea los datos XML de nodos y aristas en ArrayList<Point> y ArrayList<Edge>
                ArrayList<Point> ciudadPoints = cargarPoint(xmlNodes);
                ArrayList<Edge> ciudadEdges = cargarEdge(xmlEdges);

                // Crea una instancia de la clase Clipping para dibujar los nodos y aristas de la ciudad
                Clipping clippingPanel = new Clipping(ciudadPoints, ciudadEdges, null, null);  // No es necesario especificar archivos XML aquí

                // Agrega el componente Clipping al JPanel actual (Online)
                Local.removeAll(); // Elimina cualquier componente anterior
                Local.add(clippingPanel); 

                // Crear un JFrame para mostrar el panel Clipping
                JFrame frame = new JFrame("Dibujar Puntos");
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.setSize(1000, 1000);
                frame.add(clippingPanel);
                frame.setVisible(true);

                // Vuelve a pintar el JPanel para que se muestren los nodos y las aristas
                Local.revalidate();
                Local.repaint();
            } catch (IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al cargar la ciudad", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cargarCiudadesEnComboBox() {
        try {
            CiudadesProvider p = CiudadesProvider.instance();
            List<String> ciudades = p.list();
            
            // Limpia el JComboBox y agrega las ciudades disponibles
            jComboBox1.removeAllItems();

            for (String ciudad : ciudades) {
                jComboBox1.addItem(ciudad);
            }
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al cargar la lista de ciudades", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public static ArrayList<Point> cargarPoint(String xmlData) {
    ArrayList<Point> points = new ArrayList<>();
    try {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document document = builder.parse(new InputSource(new StringReader(xmlData)));
        NodeList nodeList = document.getElementsByTagName("row");

        for (int i = 0; i < nodeList.getLength(); i++) {
            Element element = (Element) nodeList.item(i);
            long osmid = Long.parseLong(element.getElementsByTagName("osmid").item(0).getTextContent());
            double x = Double.parseDouble(element.getElementsByTagName("x").item(0).getTextContent());
            double y = Double.parseDouble(element.getElementsByTagName("y").item(0).getTextContent());
            points.add(new Point(x, y, osmid));
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
    return points;
}

public static ArrayList<Edge> cargarEdge(String xmlData) {
    ArrayList<Edge> edges = new ArrayList<>();
    try {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document document = builder.parse(new InputSource(new StringReader(xmlData)));
        NodeList nodeList = document.getElementsByTagName("edge");

        for (int i = 0; i < nodeList.getLength(); i++) {
            Element element = (Element) nodeList.item(i);
            long u = Long.parseLong(element.getElementsByTagName("u").item(0).getTextContent());
            long v = Long.parseLong(element.getElementsByTagName("v").item(0).getTextContent());
            String highway = element.getElementsByTagName("highway").getLength() > 0
                    ? element.getElementsByTagName("highway").item(0).getTextContent()
                    : "unknown"; // Valor predeterminado en caso de que <highway> no exista

            edges.add(new Edge(u, v, highway));
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
    return edges;
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Local;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    // End of variables declaration//GEN-END:variables
}
